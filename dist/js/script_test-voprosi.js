" use strict ";

// let x = 5; alert( x++ ); 
// значение 5 
// let x = 5; alert( ++x );
// значение 6

// --------------------
// [] + false - null + true 
// console.log([] + false);
// результат false 
// console.log([] + false - null);
// результат NaN
// console.log([] + false - null + true);
// результат NaN
// если мы работаем с пустым массивом то он приведет к строке(пустой)

// ----------------------------

// let y = 1; 
// let x = y = 2; 
// alert(x); 

// это последовательное присваивание - результат будет 2 


// -------------------------------
// [ ] + 1 + 2
// console.log([ ] + 1 + 2);
// конкотинация 1 становиться строкой пустой и получаеться прилипание --результат строка "12"


// ---------------------------------
// alert( "1"[0] );

// результат 1 


// ------------------------------------
// console.log(2 && 1 && null && 0 && undefined );
// 2-true,1-true,null-fulse
// получаеться И(&&) запинаеться об  лжи(fulse)
// получаеться ИЛИ (||) запинаеться об  правде (true)

// ---------------------------------------

// !!( a && b ) и (a && b)
// console.log(!!( 1 && 2 ) === (1 && 2));

// !!-получаеться превращает в булиновое значение и конечно они разные

// ------------------------------------------
// скомбинирован из 2 логических операторов 

// alert( null || 2 && 3 || 4 ); 

// _-----------------------?
// a = [1, 2, 3]; b = [1, 2, 3]; 

// const a = [1, 2, 3];
// const b = [1, 2, 3];

// console.log(a == b);
// результат будет fulse т.к a и b это разные значения хоть и похожи внешне 

// ------------------------------
// alert( +"Infinity" ); 

// результат будет преобразование строки в числовой тип данных и выведиться Infinity 

// ------------------------------------
// console.log(0 || "" || 2 || undefined || true || falsе );

// 0-fulse,""-false, 2-true и тут ИЛИ (||) запинаеться об  правде (true) и получаеться код больше не работает 
// он остановился на 2